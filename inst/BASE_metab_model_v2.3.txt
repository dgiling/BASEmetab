## JAGS model
      
	model{
              
              # -------
              # PRIORS
              
              # Set prior of K based on user choices:
              K.mu <- ifelse(K.est.n == 1, 0.0 , K.meas.mean.ts)
              K.sd <- ifelse(K.est.n == 1, 0.25, 1/(K.meas.sd.ts*K.meas.sd.ts) )
              K ~ dnorm(K.mu,K.sd)T(0,40/(seconds/interval)) 	# estimated
              
              # Set priors of theta and p parameters based on user choice:
              p.mu  <- ifelse(p.est.n == 1, 0.0, 1)
              p.low <- ifelse(p.est.n == 1, 0.3, 1)
              p ~ dnorm(p.mu,0.25)T(p.low,1.0)
              
              theta.mu   <- ifelse(theta.est.n == 1, 0.0, 1.07177)
              theta.low  <- ifelse(theta.est.n == 1, 1.0, 1.07177)
              theta.high <- ifelse(theta.est.n == 1, 1.3, 1.07177)
              theta ~ dnorm(theta.mu,0.25)T(theta.low,theta.high)
              
              # set other priors
              A ~ dnorm(0,0.25)T(0,)
              R ~ dnorm(0,0.25)T(0,)	
              
              tau~dgamma(1,0.001)
              
              #--------
              
              seconds <- 24 * 60 * 60
              
              # model
              for (i in 1:num.measurements)
              {
                kelvin[i] <- 273.15 + tempC[i]
                
                # correction for salinity
                
                S1[i] <- 157570.1 / kelvin[i]
                S2[i] <- -6.6423080E7 / (kelvin[i] * kelvin[i])
                S3[i] <- 1.2438E10 / pow(kelvin[i],3)
                S4[i] <-  -8.621949E11 / pow(kelvin[i],4)
                sal.factor[i] <- -1.0*salinity[i]*(0.017674-10.754/kelvin[i]+2140.7/(kelvin[i]*kelvin[i]))
                
                DOsalinity.corr[i] <-exp(-139.34411+S1[i]+S2[i]+S3[i]+S4[i]+sal.factor[i])
                
                # correction for atmospheric pressure
                alpha[i] <- 0.000975-0.00001426*kelvin[i]+0.00000006436*pow(kelvin[i],2)		
                beta[i] <- exp(11.8571-3840.7/kelvin[i]-216961/pow(kelvin[i],2))
                gamma[i] <- ((1-beta[i]/atmo.pressure[i]) / (1-beta[i])) * ((1-alpha[i]*atmo.pressure[i])/(1-alpha[i]))
                
                DO.sat[i] <- DOsalinity.corr[i]*atmo.pressure[i]*gamma[i]		
                
              }
              
              temp.ave <- mean(tempC[])
              
              #Aprime <- A # no cut in jags
              #pprime <- p # no cut in jags
              #gppts[num.measurements] <- 0 #updated
              
              # for posterior predictive assessment and goodness of fit evaluation
              obs.resid[num.measurements] <- 0
              ppa.resid[num.measurements] <- 0
              
              # DO modelled
              zz ~ dnorm(0,1000000)
              DO.modelled[1] <- DO.meas[1] + zz # make monitorable
              
              
              for (i in 1:(num.measurements-1))
              {		
                # estimating primary production
                # gppts[i] <- Aprime*pow(PAR[i],pprime) 
               
		DO.meas[i+1] ~ dnorm(DO.modelled[i+1], tau)
                DO.modelled[i+1] <- DO.modelled[i] 
                + A * pow(PAR[i],p)                                       			  
                - R * (pow(theta,(tempC[i]-temp.ave)))
                + K * (DO.sat[i]-DO.modelled[i]) * pow(1.0241,(tempC[i]-temp.ave))
                
                # posterior predictive assessment nodes #
                
                # plausible sampled value
                DO.sampled.fit[i] ~ dnorm(DO.modelled[i], tau) 
                
                # squared residuals		
                obs.resid[i] <- pow((DO.meas[i] - DO.modelled[i]),2)
                ppa.resid[i] <- pow((DO.sampled.fit[i] - DO.modelled[i]),2)
                
              }
              
              # for posterior predictive assessment and goodness of fit evaluation
              sum.obs.resid <- sum(obs.resid[])
              sum.ppa.resid <- sum(ppa.resid[])
              PPfit <- step(sum.obs.resid - sum.ppa.resid)
              
              # Useful calculations
              ER <- R * (seconds/interval)
              GPP <- sum(gppts[])
              NEP <- GPP - ER
	      PR <- GPP / ER
              K.day <- K * (seconds/interval)
              
	      for (i in 1:num.measurements)
              {
		kpts[i] <- K * pow(1.0241,(tempC[i]-temp.ave))	 
		gppts[i] <- A * pow(PAR[i],p) 
		erpts[i] <- R * (pow(theta,(tempC[i]-temp.ave)))
	      }

          }
          

